@use "sass:list";
@use "sass:map";
@use "../abstract/functions" as f;
@use "../abstract/variables-maps" as v;

/* ---------- LAYOUT ---------- */
@mixin grid($gt-rows, $gt-columns) {
  display: grid;
  grid-template-rows: $gt-rows;
  grid-template-columns: $gt-columns;
}

@mixin flex($justify-content, $flex-direction, $align-items: center) {
  display: flex;
  flex-direction: $flex-direction;
  justify-content: $justify-content;
  align-items: $align-items;
}

@mixin fluid-size(
  $height: null,
  $width-min: null,
  $width-preferred: null,
  $width-max: null,
  $min-height: null,
  $min-width: null,
  $max-height: null,
  $max-width: null
) {
  @if $height != null {
    height: $height;
  }
  @if $min-height != null {
    min-height: $min-height;
  }
  @if $max-height != null {
    max-height: $max-height;
  }
  //Clamp
  @if $width-min != null and $width-preferred != null and $width-max != null {
    width: clamp($width-min, $width-preferred, $width-max);
  } @else if $width-min != null {
    width: $width-min;
  }
  @if $min-width != null {
    min-width: $min-width;
  }
  @if $max-width != null {
    max-width: $max-width;
  }
}

@mixin margin-padding($margin, $padding) {
  margin: $margin;
  padding: $padding;
}

@mixin position-top($position, $top) {
  position: $position;
  top: $top;
}

/* ---------- APPEARANCE ---------- */
@mixin border($colorPalette) {
  border: solid $colorPalette;
  border-width: 0.5em 0.35em 0.1em 0.1em;
  border-radius: 0.75em;
}

@mixin glass-effect {
  &::after {
    content: "";
    display: block;
    width: 30px;
    height: 100%;
    position: absolute;
    top: -180px;
    left: 0;
    background-color: f.theme-color(whiteColorPalette, 0.8);
    opacity: 0;
    transform: rotate(45deg);
    animation: reflect 250ms ease-in-out;
    -webkit-transform: rotate(45deg);
    -webkit-animation: reflect 250ms ease-in-out;
  }
}

/* ---------- BASIS STRUCTURE PSEUDO ELEMENTS ---------- */
@mixin pseudoElement-before(
  $height,
  $width,
  $top: 0,
  $left: 0,
  $radius: 0,
  $z-index: 0,
  $opacity: 0
) {
  &::before {
    content: "";
    position: absolute;
    // @include height-width($height, $width);
    inset: 0;
    top: $top;
    left: $left;
    border-radius: $radius;
    z-index: $z-index;
    opacity: $opacity;
  }
}

// @mixin pseudoElement-after(
//   $height,
//   $width,
//   $top: 0,
//   $left: 0,
//   $radius: 0,
//   $z-index: 0,
//   $opacity: 0
// ) {
//   &::after {
//     content: "";
//     position: absolute;
//     @include height-width($height, $width);
//     inset: 0;
//     top: $top;
//     left: $left;
//     border-radius: $radius;
//     z-index: $z-index;
//     opacity: $opacity;
//   }
// }

// PRZENIEŚ DO FUNKCJI
@function _generate-single-box-shadow($shadow-map) {
  $x: map.get($shadow-map, x);
  $y: map.get($shadow-map, y);
  $blur: map.get($shadow-map, blur);
  $spread: map.get($shadow-map, spread);
  $color-key: map.get($shadow-map, color);
  $opacity: map.get($shadow-map, opacity);
  $inset: map.get($shadow-map, inset);

  $shadow-color: f.theme-color($color-key, $opacity);

  $shadow-string: #{$x} #{$y} #{$blur};
  @if $spread != null {
    // Spread może być 0, więc sprawdzamy null, nie 0
    $shadow-string: #{$shadow-string} #{$spread};
  }
  $shadow-string: #{$shadow-string} #{$shadow-color};
  @if $inset {
    $shadow-string: #{$shadow-string} inset;
  }
  @return $shadow-string;
}

@mixin glow-panel(
  $main-color-key: "darkColorPalette",
  // The main color from which everything inherits
  $main-opacity: 0.5,

  // drop-shadow param
  $drop-shadow-x: 5px,
  $drop-shadow-y: 5px,
  $drop-shadow-blur: 10px,
  $drop-shadow-spread: 0px,
  $drop-shadow-color-key: $main-color-key,
  $drop-shadow-opacity: $main-opacity,

  // Box-shadow param (single inset and single outer shadow)
  $inset-shadow-x: -5px,
  $inset-shadow-y: 5px,
  $inset-shadow-blur: 15px,
  $inset-shadow-spread: -5px,
  $inset-shadow-color-key: $main-color-key,
  $inset-shadow-opacity: 0.56,

  $outer-shadow-x: 10px,
  $outer-shadow-y: 10px,
  $outer-shadow-blur: 20px,
  $outer-shadow-spread: 0px,
  $outer-shadow-color-key: $main-color-key,
  $outer-shadow-opacity: 0.9,

  // border param
  $border-width: 2px,
  $border-style: solid,
  $border-color-key: $main-color-key,
  $border-opacity: 0.35,

  // Checking status and properties (enable/disable)
  $state: "default",
  // 'default' or 'hover'
  $enable-drop-shadow: true,
  $enable-box-shadow: true,
  $enable-border: true,

  // advanced box-shadow map list (will overwrite single shadows)
  $box-shadow-list: null
) {
  // === MANAGING SHADOW VALUES FOR STATE ===
  // creating a map for the default and hover state
  $default-inset-shadow: (
    x: $inset-shadow-x,
    y: $inset-shadow-y,
    blur: $inset-shadow-blur,
    spread: $inset-shadow-spread,
    color: $inset-shadow-color-key,
    opacity: $inset-shadow-opacity,
    inset: true,
  );
  $default-outer-shadow: (
    x: $outer-shadow-x,
    y: $outer-shadow-y,
    blur: $outer-shadow-blur,
    spread: $outer-shadow-spread,
    color: $outer-shadow-color-key,
    opacity: $outer-shadow-opacity,
  );

  // Default values for box-shadow (list of single shadows)
  $current-box-shadow-list: ($default-inset-shadow, $default-outer-shadow);

  // Defining values for the 'hover' state
  @if $state == "hover" {
    $current-inset-shadow: (
      x: -8px,
      y: 8px,
      blur: 20px,
      spread: -8px,
      color: $inset-shadow-color-key,
      opacity: 0.8,
      inset: true,
    );
    $current-outer-shadow: (
      x: 15px,
      y: 15px,
      blur: 30px,
      spread: 0px,
      color: $outer-shadow-color-key,
      opacity: 1,
    );
    $current-box-shadow-list: ($current-inset-shadow, $current-outer-shadow);
  }

  @if $box-shadow-list != null {
    $current-box-shadow-list: $box-shadow-list;
  }

  // === GENERATING CSS ===

  // DROP-SHADOW
  @if $enable-drop-shadow {
    filter: drop-shadow(
      $drop-shadow-x
        $drop-shadow-y
        $drop-shadow-blur
        f.theme-color($drop-shadow-color-key, $drop-shadow-opacity)
    );
  } @else {
    filter: none;
  }

  // BOX-SHADOW
  @if $enable-box-shadow {
    $shadows: ();
    @each $shadow-map in $current-box-shadow-list {
      $shadows: list.append(
        $shadows,
        _generate-single-box-shadow($shadow-map),
        $separator: comma
      );
    }
    box-shadow: $shadows;
  } @else {
    box-shadow: none;
  }

  // BORDER
  @if $enable-border {
    border: $border-width
      $border-style
      f.theme-color($border-color-key, $border-opacity);
      border-radius: 0.5rem;
  } @else {
    border: none;
  }
}

@mixin gradient-frame(
  $start-color,
  $end-color,
  $padding: 2px,
  $radius: inherit,
  $direction: to right,
  $z-index: -1
) {
  position: relative;
  z-index: 0;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    padding: $padding;
    background: linear-gradient($direction, $start-color, $end-color);
    border-radius: $radius;
    pointer-events: none;
    z-index: $z-index;

    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: exclude;

    -webkit-mask: linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }
}

@mixin blur($blur) {
  backdrop-filter: blur($blur);
}
